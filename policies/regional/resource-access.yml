vars:
  # Ideally this would be sourced from s3
  # auto updated from organizations api
  accounts: &accounts
    - "XXXXXXXXXXXXXX"
    - "XXXXXXXXXXXXXX"

  notify: &notify
    type: notify
    subject: "[AWS Policy] [Account: {{account_id}}] - found externally available resources"
    violation_desc: "Resource accessible outside of demo or supported accounts"
    slack_template: custom_slack
    template: default.html
    to:
      - resource-owner
      - demo@demo.com
    transport:
      type: sns
      topic: "arn:aws:sns:us-east-2:XXXXXXXXXX:custodian-mailer-notify"

  daily-rule: &daily-mode
    packages: [botocore, boto3, urllib3]
    type: periodic
    environment:
      Variables:
        C7N_CATCH_ERR: 'yes'
    schedule: "cron(00 13 ? * MON-FRI *)"
    tags:
      App: Custodian
    role: arn:aws:iam::{account_id}:role/Custodian
    execution-options:
      metrics_enabled: aws://?region=us-east-2

policies:
  - name: cross-account-ebs-snapshot
    resource: ebs-snapshot
    mode:
      type: cloudtrail
      role: "arn:aws:iam::{account_id}:role/Custodian"
      events:
        - event: ModifySnapshotAttribute
          source: ec2.amazonaws.com
          ids: "requestParameters.snapshotId"
    tags:
      - security:external
    filters:
      - type: cross-account
        whitelist: *accounts
      - type: value
        key: "Group"
        op: ne
        value: "all"
      - "tag:public-exempt": absent
      - "tag:security-exempt": absent
      - "tag:ebs-snapshot-exempt": absent
      - "tag:security-exempt": absent
    actions:
      - <<: *notify
        subject: "[AWS Policy] [Account: {{account_id}}] - issue with EBS volume"
        violation_desc: "Recently created EBS volume is accessible outside of demo or supported accounts"

  - name: cross-account-s3
    resource: s3
    tags:
      - security:external-access
    mode:
      type: cloudtrail
      role: "arn:aws:iam::{account_id}:role/Custodian"
      events:
        - event: PutBucketPolicy
          source: s3.amazonaws.com
          ids: "requestParameters.bucketName"
    filters:
      - type: cross-account
        whitelist: *accounts
      - not:
        - type: cross-account
          whitelist_conditions: ["IpAddress", "ArnEquals", "ArnLike", "StringEquals", "StringLike"]
      - "tag:s3-exempt": absent
      - "tag:s3-temp-exempt": absent
      - "tag:s3temp-exempt": absent
      - "tag:security-exempt": absent
      - "tag:public-exempt": absent
      - "tag:public": absent
    actions:
      - <<: *notify
        subject: "[AWS Policy] [Account: {{account_id}}] - issue with S3"
        violation_desc: "Recently created S3 is accessible outside of demo or supported accounts"

  - name: cross-account-s3-acl
    resource: s3
    tags:
      - security:external-access
    mode:
      type: cloudtrail
      role: "arn:aws:iam::{account_id}:role/Custodian"
      events:
        - event: PutBucketAcl
          source: s3.amazonaws.com
          ids: "requestParameters.bucketName"
    filters:
      - type: global-grants
        allow_website: True
      - "tag:s3-exempt": absent
      - "tag:s3-temp-exempt": absent
      - "tag:s3temp-exempt": absent
      - "tag:security-exempt": absent
      - "tag:public-exempt": absent
      - "tag:public": absent
    actions:
      - <<: *notify
        subject: "[AWS Policy] [Account: {{account_id}}] - issue with S3"
        violation_desc: "Recently created S3 is accessible outside of demo or supported accounts"

  - name: cross-account-sns
    resource: sns
    tags:
      - security:external-access
    mode:
      type: cloudtrail
      role: "arn:aws:iam::{account_id}:role/Custodian"
      events:
        - event: CreateTopic
          source: sns.amazonaws.com
          ids: "requestParameters.name"
    filters:
      - or:
        - type: value
          key: Policy
          value: "\"Principal\":{\"AWS\":\"*\"},\"Action\":\"SNS:Publish\""
        - type: value
          key: Policy
          value: "\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\"]"
        - type: cross-account
          whitelist: *accounts
      - "tag:sns-exempt": absent
      - "tag:security-exempt": absent
    actions:
      - <<: *notify
        subject: "[AWS Policy] [Account: {{account_id}}] - issue with SNS"
        violation_desc: "Recently created SNS may be accessible outside of demo or supported accounts"

  - name: cross-account-sqs
    resource: sqs
    tags:
      - security:external-access
    mode:
      type: cloudtrail
      role: "arn:aws:iam::{account_id}:role/Custodian"
      events:
        - event: SetQueueAttributes
          source: sqs.amazonaws.com
          ids: "requestParameters.queueUrl"
    filters:
      - type: cross-account
        whitelist: *accounts
      - not:
        - type: value
          key: Policy
          value: ".*\"Condition.*\".*"
          op: regex
      - "tag:sqs-exempt": absent
      - "tag:security-exempt": absent
    actions:
      - <<: *notify
        subject: "[AWS Policy] [Account: {{account_id}}] - SQS alert"
        violation_desc: "Recently created SQS may be open to public"

  - name: cross-account-rds-snapshot
    resource: rds-snapshot
    tags:
      - security:external
    mode:
      type: cloudtrail
      role: "arn:aws:iam::{account_id}:role/Custodian"
      events:
        - event: ModifyDBClusterSnapshotAttribute
          source: rds.amazonaws.com
          ids: "requestParameters.valuesToAdd"
        - event: ModifyDBSnapshotAttribute
          source: rds.amazonaws.com
          ids: "requestParameters.valuesToAdd"
    filters:
      - type: cross-account
        whitelist: *accounts
      - "tag:rds-exempt": absent
      - "tag:security-exempt": absent
    actions:
      - <<: *notify
        subject: "[AWS Policy] [Account: {{account_id}}] - rds-snapshot alert"
        violation_desc: "Recently created rds-snapshot may be open to public"

  - name: cross-account-s3-create-block
    resource: s3
    tags:
      - security:external-access
    mode:
      type: cloudtrail
      role: "arn:aws:iam::{account_id}:role/CustodianGuard"
      events:
        - event: CreateBucket
          source: s3.amazonaws.com
          ids: "requestParameters.bucketName"
        - event: PutBucketPublicAccessBlock
          source: s3.amazonaws.com
          ids: "requestParameters.bucketName"
    filters:
      - "tag:security-exception": absent
      - type: value
        key: Name
        value_type: normalize
        op: regex
        value: '^((?!(demo1|demo2)).)*$'
    actions:
      - type: notify
        subject: "[AWS Policy] [Account: {{account_id}}] S3 Block public access has been enabled!"
        violation_desc: " S3 Block public access has been enabled"
        slack_template: custom_slack
        template: default.html
        to:
          - demo@demo.com
        transport:
          type: sns
          topic: "arn:aws:sns:us-east-2:XXXXXXXXXX:custodian-mailer-notify"
      - type: invoke-lambda
        function: c7n-s3-public-block
        async: true
        region: us-east-2

  - name: cross-account-s3-block
    resource: s3
    tags:
      - security:external-access
    mode:
      type: cloudtrail
      role: "arn:aws:iam::{account_id}:role/CustodianGuard"
      events:
        - event: DeleteBucketPublicAccessBlock
          source: s3.amazonaws.com
          ids: "requestParameters.bucketName"
    filters:
      - "tag:security-exception": absent
      - "tag:temp-security-exception": absent
    actions:
      - <<: *notify
        subject: "[AWS Policy] [Account: {{account_id}}] S3 Block public access has been enabled!"
        violation_desc: " S3 Block public access has been enabled
      - type: invoke-lambda
        function: c7n-s3-public-block
        async: true
        region: us-east-2
